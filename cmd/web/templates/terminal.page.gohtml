{{template "base" .}}
{{define "title"}}
    Virtual Terminal
{{end}}
{{define "content"}}
<h1 class="mt-3 text-center">Virtual Terminal Page</h1>
<hr>
<div class="alert alert-danger text-center d-none" id="card-messages"></div>
<form 
    action="/payment-succeeded" 
    method="post"
    name="charge-form"
    id="charge-form"
    class="d-block needs-validation charge-form"
    autocomplete="off" 
    novalidate="">
        <div class="mb-3">
            <label for="amount" class="form-label">Amount</label>
            <input type="text" class="form-control" id="amount" name="amount"
                required="" autocomplete="amount-new"> 
        </div>

        <div class="mb-3">
            <label for="cardholder-name" class="form-label">Cardholder Name</label>
            <input type="text" class="form-control" id="cardholder-name" name="cardholder-name"
                required="" autocomplete="cardholder-name"> 
        </div>

        <div class="mb-3">
            <label for="cardholder-email" class="form-label">Cardholder Email</label>
            <input type="text" class="form-control" id="cardholder-email" name="cardholder-email"
                required="" autocomplete="cardholder-email"> 
        </div>

        <div class="mb-3">
            <label for="card-element" class="form-label">Credit Card</label>
            <div id="card-element" class="form-control"></div>
            <div class="alert-danger text-center" id="card-errors" role="alert"></div>  
            <div class="alert-success text-center" id="card-success" role="alert"></div>  
        </div>

        <hr>

        <a id="pay-button" href="javascript:void(0)" class="btn btn-primary" onclick="val()">Charge Card</a>
        <div class="text-center d-none" id="processing-payment">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>

        <input type="hidden" name="payment_intent" id="payment_intent">
        <input type="hidden" name="payment_method" id="payment_method">
        <input type="hidden" name="payment_amt" id="payment_amt">
        <input type="hidden" name="payment_curr" id="payment_curr">


</form>
{{end}}
{{define "js"}}
    <script src="https://js.stripe.com/v3/"></script>
    <script>
    let card 
    const cardMessages = document.getElementById("card-messages")
    const payButton = document.getElementById("pay-button")
    const processing = document.getElementById("processing-payment")

    const stripe = Stripe('pk_test_51JbKKnSHO8XxJVPpoR1aNfP194YdEOjkvOtBmA7zn3VLDyhS1DURjHxX3AyqA2vZo9wJPDFneSNCzrXi5XVjs1Ys00YjhCvv2H');
    
    function hidePayButton() {
        payButton.classList.add("d-none")
        processing.classList.remove("d-none")
    }
    
    function val() {
        console.log("Calling val")
        let form = document.getElementById("charge-form");
        if(form.checkValidity() === false) {
            this.event.preventDefault();
            this.event.stopPropagation();
            form.classList.add("was-validated");
            return
        }
        form.classList.add("was-validated");
        hidePayButton(); 
        
        let amountToCharge = String(parseFloat(document.getElementById("amount").value) * 100)

        let payload = {
            amount: amountToCharge,
            currency: 'cad'
        }

        const requestOptions = {
            method: 'post',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
            body: JSON.stringify(payload)
        }

        fetch("http://localhost:4001/charge", requestOptions)
            .then(resp => resp.text())
            .then(resp => {
                let data;
                trt {
                    data = JSON.parse(resp)
                    console.log(data)
                } catch (err) {
                    console.log(err)
                }

            })
    }

    (() => {
        const elements = stripe.elements();
        const style = {
            base: {
                fontSize: '16px',
                lineHeight: '24px'
            }
        };
        card = elements.create('card', { style, hidePostalCode: false });
        card.mount("#card-element");
        card.addEventListener('change', function(event) {
            var displayError = document.getElementById("card-errors");
            if(event.error) {
                displayError.classList.remove('d-none');
                displayError.textContent = event.error.message;
            } else  {
                displayError.classList.add('d-none');
                displayError.textContent = '';
            }
        });
    })()

    </script>
{{end}}